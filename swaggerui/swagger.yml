# swagger: '2.0'
openapi: 3.0.0
info:
  description: This is documentation to use Dorayaki backend API
  version: 1.0.0
  title: Swagger Dorayaki backend API
  contact:
    email: 13519105@std.stei.itb.ac.id
servers:
  - url: http://localhost:8080/api/v1
    description: Development server
paths:
  /signin:
    post:
      tags:
        - Sign In
      summary: Authenticate admin to modify database
      description: Authenticate using username password to get JWT token.
      operationId: 'sign in'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignIn'
              description: Input username and password
      responses:
        200:
          description: Sign in success. JWT token set in cookie "token". You can use this cookie instead of Bearer Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringDataResponse'

        400:
          description: Error because invalid body request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        401:
          description: Error because wrong username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        500:
          description: Error because something wrong with internal server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServer'
      deprecated: false
  /files/{nameOfImage}:
    get:
      tags:
        - Images
      operationId: getImages
      summary: Returns image with specified name of image
      description: Returns image with specified name of image. Image can be jpg, jpeg, gif, png
      parameters:
        - name: nameOfImage
          in: path
          description: Name of the image that will be fetched
          required: true
          schema:
            type: string
      responses:
        200:
          description: Fetching success
          content:
            image/*:
              schema:
                type: string
                format: binary
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        500:
          description: Error because something wrong with internal server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServer'
  /shops:
    get:
      tags:
        - Shops
      summary: Returns all shop from database without external components
      description: Returns all shop without its dorayakis and stock
      responses:
        200:
          description: Fetching success
          content:
            application/json:
              schema:
                $ref: '#components/schemas/TokoDataResponse'
        500:
          description: Error because something wrong with internal server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServer'
    post:
      tags:
        - Shops
      summary: Create a new shop and save it to database.
      description: Create a new shop using request body. Will omit all dorayakis and stocks.
      security:
        - BearerAuth: []
          CookieAuth: []
          QueryAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Toko'
              description: Input shop's data
      responses:
        201:
          description: Create shop success
          content:
            application/json:
              schema:
                $ref: '#components/schemas/TokoDataResponse'
        400:
          description: Error because invalid body request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        401:
          description: Error because wthere is no JWT token. Check if its exist and valid in order of Bearer, Cookie, and then Query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        500:
          description: Error because something wrong with internal server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServer'
  /shops/search:
    get:
      tags:
        - Shops
        - Paginate
      summary: Paginate shop based on query kecamatan and provinsi
      description: Paginate shop based on query sort, itemsPerPage, pageIndex, kecamatan and provinsi.
      parameters:
        - in: query
          name: sort
          schema:
            type: string
          description: Determine how data be sorted with name of column. Prefix "-" means descending
        - in: query
          name: itemsPerPage
          schema:
            type: integer
            default: 10
            minimum: 1
          description: Amount of items in 1 page
        - in: query
          name: pageIndex
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Index of current page (1 based index)
        - in: query
          name: kecamatan
          schema:
            type: string
          description: Query kecamatan from input
        - in: query
          name: provinsi
          schema:
            type: string
          description: Query provinsi from input
      responses:
        200:
          description: Get pagination success
          content:
            application/json:
              schema:
                $ref: '#components/schemas/PaginateTokoResponse'
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        500:
          description: Error because something wrong with internal server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServer'
  /shops/{shopId}:
    get:
      tags:
        - Shops
      summary: Get shop/toko by ID
      description: Get shop/toko and its all dorayakis
      operationId: getShop
      parameters:
        - in: path
          name: shopId
          required: true
          description: ID of the shop
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Get shop/toko success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokoDataResponse'
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        500:
          description: Error because something wrong with internal server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServer'
    put:
      tags:
       - Shops
      summary: Edit shop by id
      description: Edit base information about shop/toko (not including its dorayakis)
      operationId: updateShop
      security:
        - BearerAuth: []
          CookieAuth: []
          QueryAuth: []
      parameters:
        - in: path
          name: shopId
          required: true
          description: ID of the shop
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Toko'
              description: Input new shop's data
      responses:
        200:
          description: Update shop success
          content:
            application/json:
              schema:
                $ref: '#components/schemas/TokoDataResponse'
        400:
          description: Error because invalid body request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        401:
          description: Error because wthere is no JWT token. Check if its exist and valid in order of Bearer, Cookie, and then Query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        500:
          description: Error because something wrong with internal server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServer'
    delete:
      tags:
       - Shops
      summary: Delete shop by id
      description: Delete shop/toko by id and its all dorayakis
      operationId: deleteShop
      security:
        - BearerAuth: []
          CookieAuth: []
          QueryAuth: []
      parameters:
        - in: path
          name: shopId
          required: true
          description: ID of the shop
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Delete success
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        500:
          description: Error because something wrong with internal server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServer'
  /shops/{shopId}/{dorayakiId}:
    get:
      tags:
        - Shops
        - Stocks
      summary: Get stock of dorayaki in the shop
      description: Get stock of dorayaki in the shop. If the dorayaki was not added in the shop, then this endpoint will add that dorayaki in the shop with stock = 0.
      operationId: getStock
      parameters:
        - in: path
          name: shopId
          required: true
          description: ID of the shop
          schema:
            type: integer
            minimum: 1
        - in: path
          name: dorayakiId
          required: true
          description: ID of the dorayaki
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Get stock success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockDataResponse'
        500:
          description: Error because something wrong with internal server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServer'
    post:
      tags:
        - Shops
        - Stocks
      summary: Add/reduce stock of dorayaki in the shop
      description: Add stock of dorayaki in the shop. If want to reduce it, pass a negative value
      operationId: addStock
      security:
        - BearerAuth: []
          CookieAuth: []
          QueryAuth: []
      parameters:
        - in: path
          name: shopId
          required: true
          description: ID of the shop
          schema:
            type: integer
            minimum: 1
        - in: path
          name: dorayakiId
          required: true
          description: ID of the dorayaki
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                add_stock:
                  type: integer
                  description: Amount of dorayaki that want to be added. Pass a negative value if want to reduce it.
      responses:
        200:
          description: Add/reduce stock success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockDataResponse'
        400:
          description: Error because invalid body request (reducing stock to be <0 will trigger this error too)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        401:
          description: Error because wthere is no JWT token. Check if its exist and valid in order of Bearer, Cookie, and then Query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        500:
          description: Error because something wrong with internal server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServer'
  /shops/{shopId}/transfer/{targetShopId}:
    post:
      tags:
        - Shops
        - Stocks
      summary: Transfer some dorayaki into another shop.
      description: Transfer some dorayaki into another shop. Cannot transfer dorayaki with amount more than source shop's stocks.
      operationId: transferStock
      security:
        - BearerAuth: []
          CookieAuth: []
          QueryAuth: []
      parameters:
        - in: path
          name: shopId
          required: true
          description: ID of the source shop
          schema:
            type: integer
            minimum: 1
        - in: path
          name: targetShopId
          required: true
          description: ID of the target shop
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stock:
                  type: integer
                  minimum: 1
                  description: Amount of dorayaki that want to be transferred
                id_dorayaki:
                  type: integer
                  minimum: 1
                  description: Dorayaki id that want to be transferred
      responses:
        200:
          description: Transfer stock success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: Success
        400:
          description: Error because invalid body request (transfer dorayaki more than source's stock can trigger this too)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        401:
          description: Error because wthere is no JWT token. Check if its exist and valid in order of Bearer, Cookie, and then Query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        500:
          description: Error because something wrong with internal server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServer'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    CookieAuth:
      type: apiKey
      in: cookie
      name: token
    QueryAuth:
      type: apiKey
      in: query
      name: jwt
  schemas:
    Dorayaki:
      description: Schema for dorayaki
      type: object
      properties:
        id:
          type: integer
          description: ID of dorayaki
        rasa:
          type: string
          description: Taste of dorayaki
        deskripsi:
          type: string
          description: Description of dorayaki
        image_url:
          type: string
          description: Image URL of dorayaki
        created_at:
          type: integer
          description: Time since dorayaki's variant created
        updated_at:
          type: integer
          description: Time since dorayaki's variant updated
      required:
        - rasa
        - deskripsi
    Toko:
      description: Schema for shop/toko
      type: object
      properties:
        id:
          type: integer
          description: ID of shop/toko
        nama:
          type: string
          description: Name of shop/toko
        jalan:
          type: string
          description: Street address of shop/toko
        kecamatan:
          type: string
          description: Subdistrict of shop/toko
        provinsi:
          type: string
          description: District/province of shop/toko
        dorayaki:
          type: array
          items:
            $ref: '#/components/schemas/Dorayaki'
        stok:
          type: array
          items:
            $ref: '#/components/schemas/TokoDorayaki'
        created_at:
          type: integer
          description: Time since the shop created
        updated_at:
          type: integer
          description: Time since the shop updated
      required:
        - nama
        - jalan
        - kecamatan
        - provinsi
    TokoDorayaki:
      description: Schema for dorayaki's stock in the shop
      type: object
      properties:
        toko_id:
          type: integer
          description: ID of shop/toko
        dorayaki_id:
          type: integer
          description: ID of dorayaki
        stok:
          type: integer
          description: Stock of dorayaki in the shop
        created_at:
          type: integer
          description: Time since dorayaki's variant added to the shop
        updated_at:
          type: integer
          description: Time since dorayaki's variant restocked to the shop
    ErrorBadRequest:
      description: Bad request
      type: object
      properties:
        status_code:
          type: integer
          description: Error's status code
          default: 400
        message:
          type: string
          description: Error's message
          default: Bad request
    ErrorUnauthorized:
      description: There is no token in header, cookie, or url query
      type: object
      properties:
        status_code:
          type: integer
          description: Error's status code
          default: 401
        message:
          type: string
          description: Error's message
          default: Unauthorized
    ErrorNotFound:
      description: Resource not found
      type: object
      properties:
        status_code:
          type: integer
          description: Error's status code
          default: 404
        message:
          type: string
          description: Error's message
          default: Resource not found
    ErrorInternalServer:
      description: Internal server error
      type: object
      properties:
        status_code:
          type: integer
          description: Error's status code
          default: 500
        message:
          type: string
          description: Error's message
          default: Internal server error
    StringDataResponse:
      description: Response that its data contains URL or token.
      type: object
      properties:
        status_code:
          type: integer
          description: Status code of response
          default: 200
        message:
          type: string
          description: Message of response
          default: Success
        data:
          type: array
          items:
            type: string
    TokoDataResponse:
      description: Response that its data contains Toko/shop schema.
      type: object
      properties:
        status_code:
          type: integer
          description: Status code of response
          default: 200
        message:
          type: string
          description: Message of response
          default: Success
        data:
          type: array
          items:
            $ref: '#/components/schemas/Toko'
    StockDataResponse:
      description: Response that its data contains TokoDorayaki (stock) schema.
      type: object
      properties:
        status_code:
          type: integer
          description: Status code of response
          default: 200
        message:
          type: string
          description: Message of response
          default: Success
        data:
          type: array
          items:
            $ref: '#/components/schemas/TokoDorayaki'
    PaginateTokoResponse:
      description: Response for shop/toko pagination
      type: object
      properties:
        status_code:
          type: integer
          description: Status code of response
          default: 200
        message:
          type: string
          description: Message of response
          default: Success
        items_per_page:
          type: integer
          description: Amount of items in 1 page
          default: 10
        total_items:
          type: integer
          description: Total amount of items based on query
        page_index:
          type: integer
          description: Index of current page (1 based index)
          default: 1
        total_pages:
          type: integer
          description: Total pages of pagination result
        sort:
          type: string
          description: Determine how data be sorted with name of column. Prefix "-" means descending
        kecamatan:
          type: string
          description: Query kecamatan from input
        provinsi:
          type: string
          description: Query provinsi from input
        data:
          type: array
          items:
            $ref: '#/components/schemas/Toko'
    PaginateDorayakiResponse:
      description: Response for shop/toko pagination
      type: object
      properties:
        status_code:
          type: integer
          description: Status code of response
          default: 200
        message:
          type: string
          description: Message of response
          default: Success
        items_per_page:
          type: integer
          description: Amount of items in 1 page
          default: 10
        total_items:
          type: integer
          description: Total amount of items based on query
        page_index:
          type: integer
          description: Index of current page (1 based index)
          default: 1
        total_pages:
          type: integer
          description: Total pages of pagination result
        sort:
          type: string
          description: Determine how data be sorted with name of column. Prefix "-" means descending
        rasa:
          type: string
          description: Query rasa from input
        data:
          type: array
          items:
            $ref: '#/components/schemas/Dorayaki'
    SignIn:
      type: object
      properties:
        username:
          type: string
          description: Username of admin
        password:
          type: string
          description: Password of admin
      required:
        - username
        - password
externalDocs:
  description: 'Find out more about Swagger'
  url: 'http://swagger.io'
